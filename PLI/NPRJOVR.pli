NPRJOVR: proc options(main) ;

  /** File passed from JCL **/
  dcl UATOVRDF             file record sequential;

  /** Report out files **/
  dcl MATCHFL              file print stream;
  dcl MSMTCHFL             file print stream;

  /** ISPF Table variable **/
  dcl JCLNAME              char(8);
  dcl FLOVRDNM             char(8);
  dcl DBOVRDNM             char(8);

  /** Cursor Names **/
  dcl DB2_PROD_JCLNAME     char(8);
  dcl DB2_UAT_JCLNAME      char(8);
  dcl DB2_LIST_JCLNAME     char(8);
  dcl DB2_TIMESTAMP        char(8);
  dcl PRODLISTNAME         char(8);

  /** File Structure **/
  dcl 1 UAT_OVERRIDE_REC,
      2 PROD_NAME         char(8),
      2 filler0           char(2),
      2 UAT_NAME          char(8),
      2 filler1           char(1),
      2 IDATE             char(11),
      2 filler2           char(1).
      2 ITIME             char(8),
      2 filler3           char(3),
      2 IUSER             char(8),
      2 filler4           char(25);

  /** Other Variable **/
  dcl COVT_TIMESTAMP       char(8);

  /** Error Variables **/
  dcl ERROR_CODE           fixed bin(15) init(0);

  dcl isplink entry external options (asm inter retcode);
  fetch isplink;

  exec Sql 
    include SQLCA;

  on error 
    begin;
      on error system;
      put skip list("NPRJOVR Error: " || oncode());
      put skip list("InProc: " || onloc());
      ERROR_CODE = 16;
    end;

  /** Main Program Start **/
  put skip file(MATCHFL)(
      center('JCLNAME',   8, ' ')  ||
      center('File ',    10, ' ')  ||
      center('Table ',   10, ' ')  ||
      );

  put skip file(MSMTCHFL)(
      center(' JCLNAME',  8, ' ')  ||
      center('File ',    10, ' ')  ||
      center('Table ',   10, ' ')  ||
      center('Date ',     8, ' ')  ||
      center('Time ',    17, ' ')  ||
      center(' MisMatch Reason ', 15, ' ')
      );

  call Process_Define;
  call Get_JCLNAME_Not_Table;
  call Read_File_Add_JCLOvrd_Tbl;
  call Get_DB_Ovrd_Name;
  call Compare_Write_Mismtch_Rpt;
  call Compare_Write_Match_Rpt;
  /** Main Program End **/

  /**
  * Setup the ISPF Table and pass variable to the table in the CLIST
  * Key: JCLNAME
  * Names: FLOVRDNM
  *        DBOVRDNM
  *        DATES
  *        TIMES
  **/
  Process_Define: proc;
    call isplink('VDEFINE', 'JCLNAME', JCLNAME, 'CHAR ', stg(JCLNAME));
    call isplink('VDEFINE', 'FLOVRDNM', FLOVRDNM, 'CHAR ', stg(FLOVRDNM));
    call isplink('VDEFINE', 'DBOVRDNM', DBOVRDNM, 'CHAR ', stg(DBOVRDNM));
    call isplink('VDEFINE', 'DATES   ', DATES   , 'CHAR ', stg(DATES   ));
    call isplink('VDEFINE', 'TIMES   ', TIMES   , 'CHAR ', stg(TIMES   ));
  end Process_Define;

  /**
  * Writes out the query that compares Over ride table to the List Table
  **/
  Get_JCLNAME_Not_Table: proc;
    dcl MORE_ROWS  char('Y');

    call Declare_Cursor_JCLOvrd;

    exec Sql
      open JCL_LIST_CSR;

    if SQLCODE ^= 0 then 
      put skip list('Error in Open JCL_LIST_CSR');

    exec Sql  
      fetch JCL_LIST_CSR
        into :PRODLISTNAME;

    if SQLCODE ^= 0 then 
      put skip list('Error in Fetch JCL_LIST_CSR');

    if SQLCODE = 100 then
      MORE_ROWS = 'N';
    
    do until(MORE_ROWS = 'N');
      put skip file(MSMTCHFL)(
          center(PRODLISTNAME,  length(PRODLISTNAME), ' ')  ||
          center('       ', 10, ' ')  ||
          center('       ', 10, ' ')  ||
          center('       ',  8, ' ')  ||
          center('       ', 17, ' ')  ||
          center('       ', 15, ' ')
      );

      exec Sql  
        fetch JCL_LIST_CSR
          into :PRODLISTNAME;

      if SQLCODE ^= 0 then 
        put skip list('Error in Fetch JCL_LIST_CSR');

      if SQLCODE = 100 then
        MORE_ROWS = 'N';

    end;
  end Get_JCLNAME_Not_Table;

  /**
  * Read the file into the ISPF Table to set the Keys and Names
  **/
  Read_File_Add_JCLOvrd_Tbl: proc;
    dcl MORE_RECORDS  char('Y');

    on endfile (UATOVRDF) MORE_RECORDS = 'N';

    on undefinedfile(UATOVRDF)
      begin;
        put skip list('Unable to locate Over Ride file');
        ERROR_CODE = 16;
        goto end_NPRJOVR;
      end;

    read file(UATOVRDF) into(UAT_OVERRIDE_REC);

    do while(MORE_RECORDS = 'Y');
      if PROD_NAME ^= 'PROD-NAME' &
        PROD_NAME ^= '_________' then 
      do;
        JCLNAME  = PROD_NAME;
        FLOVRDNM = UAT_NAME;
        DATES    = IDATES;
        TIMES    = ITIMES;

        call isplink('TBADD', 'JCLOVRD');

        if pliretv > 0 then
          put skip file(MSMTCHFL)(
            center(JCLNAME,  length(JCLNAME), ' ')  ||
            center(FLOVRDNM,  10, ' ')  ||
            center(DBOVRDNM,  10, ' ')  ||
            center(DATES,     12, ' ')  ||
            center(TIMES,     11, ' ')  ||
            center('-> Duplicates In File', 23, ' ')
          );
      end;
      read file(UATOVRDF) into(UAT_OVERRIDE_REC);
    end;
    close file(UATOVRDF); 
  end Read_File_Add_JCLOvrd_Tbl;

  /**
  * Read the DB query into the output file
  **/
  Get_DB_Ovrd_Name: proc;
    char MORE_ROWS     char('Y);

    exec Sql
      open JCL_OVRD_CSR;

    if SQLCODE ^= 0 then 
      put skip list('Error in Open JCL_OVRD_CSR');

    exec Sql  
      fetch JCL_OVRD_CSR
        into :DB2_PROD_JCLNAME,
            :DB2_UAT_JCLNAME,
            :DB2_TIMESTAMP;

    if SQLCODE ^= 0 then 
      put skip list('Error in Fetch JCL_OVRD_CSR');

    if SQLCODE = 100 then
      MORE_ROWS = 'N';
    
    do while(MORE_ROWS = 'Y');
      JCLNAME = DB2_PROD_JCLNAME;

      call Chk_Update_JCLOvrd_Tbl;

      exec Sql  
      fetch JCL_OVRD_CSR
        into :DB2_PROD_JCLNAME,
            :DB2_UAT_JCLNAME,
            :DB2_TIMESTAMP;

      if SQLCODE ^= 0 then 
        put skip list('Error in Fetch JCL_OVRD_CSR');

      if SQLCODE = 100 then
        MORE_ROWS = 'N';
    end;
  end Get_DB_Ovrd_Name;

  /**
  * Adds JCLNAME to the ISP Table and if it is already in the table it willl skip the JCLNAME,
  * It will also add the DBOVRDNM name.
  **/
  Chk_Update_JCLOvrd_Tbl: proc;
    call isplink('TBTOP', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBTOP JCLOVRD');

    JCLNAME = DB2_PROD_JCLNAME;

    call isplink('TBGET', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBGET JCLOVRD');

    if pliretv() = 0 then
      do;
        DBOVRDNM = DB2_UAT_JCLNAME;
        DATES    = Cont_Datestamps(DB2_TIMESTAMP);
        TIMES    = Convt_Timestamp(DB2_TIMESTAMP);

        call isplink('TBMOD', 'JCLOVRD');
        call Send_ISPF_Error_Message('TBMOD JCLOVRD')
      end;
    else
      do;
        FLOVRDNM = '        ';
        DBOVRDNM = DB2_UAT_JCLNAME;
        DATES    = Cont_Datestamps(DB2_TIMESTAMP);
        TIMES    = Convt_Timestamp(DB2_TIMESTAMP);

        call isplink('TBADD', 'JCLOVRD');
        call Send_ISPF_Error_Message('TBADD JCLOVRD')
      end;
  endChk_Update_JCLOvrd_Tbl;

  Compare_Write_Mismtch_Rpt: proc;
    dcl MORE_ROWS    char('Y');

    call isplink('TBTOP', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBTOP JCLOVRD');

    call isplink('TBSKIP', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBSKIP JCLOVRD');

    if pliretv() = 0 then 
      MORE_ROWS = 'Y';
    else
      MORE_ROWS = 'N';
    
    do while(MORE_ROWS = 'Y');
      if length(FLOVRDNM) = 0 then 
      do;
        put skip file(MSMTCHFL)(
                      center(JCLNAME, length(JCLNAME), ' ')  ||
                      center(FLOVRDNM, 10, ' ')  ||
                      center(DBOVRDNM, 10, ' ')  ||
                      center(DATES,    12, ' ')  ||
                      center(TIMES,    10, ' ')  ||
                      center('-> Missing In File', 23, ' ')
                    );
      end;
      if else length(DBOVRDNM) = 0 then 
      do;
        put skip file(MSMTCHFL)(
                      center(JCLNAME, length(JCLNAME), ' ')  ||
                      center(FLOVRDNM, 10, ' ')  ||
                      center(DBOVRDNM, 10, ' ')  ||
                      center(DATES,    12, ' ')  ||
                      center(TIMES,    10, ' ')  ||
                      center('-> Missing In Table', 23, ' ')
                    );
      end;
      if else FLOVRDNM ^= DBOVRDNM then 
      do;
        put skip file(MSMTCHFL)(
                      center(JCLNAME, length(JCLNAME), ' ')  ||
                      center(FLOVRDNM, 10, ' ')  ||
                      center(DBOVRDNM, 10, ' ')  ||
                      center(DATES,    12, ' ')  ||
                      center(TIMES,    10, ' ')  ||
                      center('-> Missmatch Name', 23, ' ')
                    );
      end;

      call isplink('TBSKIP', 'JCLOVRD');
      call Send_ISPF_Error_Message('TBSKIP JCLOVRD');

      if pliretv() = 8 then
        MORE_ROWS = 'N';

    end;
  end Compare_Write_Mismtch_Rpt; 

  /**
  * write out the JCL Name with the matching over ride file from the table and file
  **/
  Compare_Write_Match_Rpt: proc;
    dcl MORE_ROWS    char('Y');

    call isplink('TBTOP', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBTOP JCLOVRD');

    call isplink('TBSKIP', 'JCLOVRD');
    call Send_ISPF_Error_Message('TBSKIP JCLOVRD');

    if pliretv() = 0 then 
      MORE_ROWS = 'Y';
    else
      MORE_ROWS = 'N';

    do while(MORE_ROWS = 'Y');
      if length(FLOVRDNM) = 0 then 
      do;
        put skip file(MSMTCHFL)(
                      center(JCLNAME, length(JCLNAME), ' ')  ||
                      center(FLOVRDNM, 10, ' ')  ||
                      center(DBOVRDNM, 10, ' ')  ||
                      center(DATES,    12, ' ')  ||
                      center(TIMES,    10, ' ')  ||
                      center('-> Missing In File', 23, ' ')
                    );
      end;

      call isplink('TBSKIP', 'JCLOVRD');
      call Send_ISPF_Error_Message('TBSKIP JCLOVRD');

      if pliretv() = 8 then
        MORE_ROWS = 'N';

    end;
  end Compare_Write_Mismtch_Rpt;

  Declare_Cursor_JCLOvrd: proc;
    exec Sql declare JCL_OVRD_CSR Cursor  
      select PROD_ENITY_NAME,
             UAT_ENITY_NAME,
             DB2_TIMESTAMP_DZ
        from OVRD_TABLE as OVRD
      where exist 
        (
          select PROD_ENITY_NAME
            from LIST_TABLE as LST
              where OVRD.OVRD_TABLE = LST.LIST_TABLE
        );

    exec Sql declare JCL_LIST_CSR Cursor  
      select OVRD.PROD_ENITY_NAME,
             LST.PROD_ENITY_NAME
        from OVRD_TABLE as OVRD
      left join LIST_TABLE as LST
      on OVRD.PROD_ENITY_NAME = LST.PROD_ENITY_NAME
      where LST.LIST_TABLE = null;
      
  end Declare_Cursor_JCLOvrd;

end NPRJOVR;